[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The Enabling Analysis in the Cloud Using NASA Earth Science Data will take place on Sunday, December 10 from 13:00-16:30.\nZoom links will be shared directly with this group via a (calendar) meeting invite.\nNote, hands-on exercises will be executed from a Jupyter Lab instance in 2i2c. Please pass along your Github Username to get access."
  },
  {
    "objectID": "schedule.html#workshop-schedule",
    "href": "schedule.html#workshop-schedule",
    "title": "Schedule",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\n\nDecember 10, 2023\n\n\n\nTime, PST (UTC-7)\nEvent\nLeads/Instructors\n\n\n\n\n1:00 pm\nWelcome / Open Science Mindset\nCassie Nickles (PO.DAAC)\n\n\n1:20 pm\nIntroduction to NASA Earthdata Cloud\nMichele Thornton (ORNL DAAC)\n\n\n1:40 pm\nOrientation and setup in JupyterHub in the Cloud\nMichele Thornton (ORNL DAAC)\n\n\n2:00 pm\nTutorial: In-cloud Science Workflow: Search & Discovery\nAaron Friesz (LP DAAC)\n\n\n2:30 pm\nBreak\n\n\n\n2:45 pm\nTutorial: In-cloud Science Workflow: Access, Subset & Plot\nDanny Kaufman (ASDC DAAC)\n\n\n3:45 pm\nQ & A\nAll NASA Openscapes Mentors\n\n\n4:15 pm\nClosing Survey\n\n\n\n\n\n\nGetting help during the Workshop\nTODO"
  },
  {
    "objectID": "schedule.html#getting-help-during-the-workshop",
    "href": "schedule.html#getting-help-during-the-workshop",
    "title": "Schedule",
    "section": "Getting help during the Workshop",
    "text": "Getting help during the Workshop\nWe will use the ECOSTRESS Slack Workspace as our main channels for help. Please use Slack to post questions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "",
    "text": "Welcome to the 2023 NASA Openscapes AGU Workshop hosted by NASA Openscapes!\nThe workshop will take place in person and virtually at AGU on Sunday, December 10, 2023 from 1pm-4:30pm PST (UTC-7)."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "About",
    "text": "About\n\nWorkshop Goals\n\nProvide an inclusive place to learn about and experience working with NASA Earthdata Cloud;\nProvide strategies and best practices for finding and accessing NASA Earthdata Cloud data to help promote interdisciplinary research. Specifically, participants will learn how to access data from AWS S3 buckets and have a better understanding of the Python ecosystem used to analyze the data depending on size and data formats;\nBetter understand the needs of Earthdata data scientists by providing a pre/post survey and engaging in discussions with workshop participants;\nIdentify and practice using popular open source tools and utilities.\n\n\n\nWorkshop Description\nEarth science data, including NASA Earthdata, is increasingly more available from the cloud. By leveraging cloud compute resources, open science principles, and technologies that foster transparency and reproducibility, science can be done at rates and scales that are not achievable by using personal/local machines. Building modern data skills in a friendly environment is crucial for accelerating science and reducing barriers to inclusive scientific research. In this workshop, NASA Openscapes Mentors from NASA’s Earth Observing System Data and Information System (EOSDIS) DAACs (data centers) will teach the foundations of an open science mindset and apply these concepts to work in the cloud with NASA Earthdata. Participants will take part in hands-on tutorials using a JupyterHub managed by 2i2c in AWS. Participants will leave with a better understanding of how to leverage data and services from NASA Earthdata Cloud within their work across a variety of disciplines and data types, as well as how to apply the concepts of open science as a daily practice. The workshop will encourage discussion and reflection on how Earth science is evolving. Tutorials will be taught in Python. The target audience is anyone interested in using NASA Earth Science data within the AWS cloud. Previous experience in the AWS cloud is not necessary. Experience using Python is recommended but not required.\n\n\nLearning Outcomes\nUpon completion of the proposed workshop, participants will leave with a better understanding of how NASA Earthdata Cloud data and services can best be leveraged and integrated within their work across a variety of disciplines and data types, while being exposed to open science practices and workflows in Python. Participants will be engaged on two different levels: (1) through an open science mindset, and (2) through science use cases that demonstrate capabilities for efficient data discovery, access, and use within the cloud. These learning objectives will encourage discussion and reflection on how the Earth science, data science, and informatics communities are evolving, and how this evolution presents challenges and opportunities in scientific research."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis Workshop has been developed as a cross-DAAC collaboration by the NASA-Openscapes Team. Learn more at nasa-openscapes.github.io."
  },
  {
    "objectID": "cloud-paradigm.html",
    "href": "cloud-paradigm.html",
    "title": "NASA and the Cloud Paradigm",
    "section": "",
    "text": "Slides that introduce NASA Earthdata Cloud & the Cloud Paradigm."
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html",
    "title": "NASA Earthdata Cloud Clinic",
    "section": "",
    "text": "Welcome to the NASA Earthdata Cloud Clinic.\nWe will go through two different direct cloud access & subsetting options available in the Earthdata Cloud:\n\nThe earthaccess python library for data search and direct cloud access, followed by xarray subsetting\n\nWorking with MEaSUREs Sea Surface Height Anomalies\nDiscover data using Earthdata Search\n\nThe Harmony-py python library for direct cloud access & data subsetting\n\nRequesting a subset of data from the GHRSST Level 4 MUR Global Foundation Sea Surface Temperature Analysis (v4.1) dataset using a vector-based geospatial file.\nThis dataset can also be viewed in Earthdata Search.\n\n\nIn both scenarios, we will be accessing data directly from Amazon Web Services (AWS), specifically in the us-west-2 region, which is where all cloud-hosted NASA Earthdata reside. This shared compute environment (JupyterHub) is also running in the same location. We will then load the data into Python as an xarray dataset.\nSee the bottom of the notebook for additional resources, including several tutorials that that served as a foundation for this clinic.\n\n\nIn addition to directly accessing the files archived and distributed by each of the NASA DAACs, many datasets also support services that allow us to customize the data via subsetting, reformatting, reprojection/regridding, and file aggregation. What does subsetting mean? Here’s a generalized graphic of what we mean.\n\nNote: “direct cloud access” is also called “direct S3 access” or simply “direct access”. And “subsetting” is also called “transformation”."
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#learning-objectives",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#learning-objectives",
    "title": "NASA Earthdata Cloud Clinic",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUtilize the earthaccess python library to search for data using spatial and temporal filters and explore search results\nPerform in-region direct access of data from an Amazon Simple Storage Service (S3) bucket\nExtract variables and spatial slices from an xarray dataset\nPlot data using xarray\nConceptualize data subsetting services provided by NASA Earthdata, including Harmony\nPlot a polygon geojson file with a basemap using geoviews\nUtilize the harmony-py library to request data over the Gulf of Mexico"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#prerequisites",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#prerequisites",
    "title": "NASA Earthdata Cloud Clinic",
    "section": "Prerequisites",
    "text": "Prerequisites\nFirst we’ll import python packages and set our authentication that will be used for both of our access and subsetting methods.\nYou’ll also need to be aware that data in NASA’s Earthdata Cloud reside in Amazon Web Services (AWS) Simple Storage Service (S3) buckets. Access is provided via temporary credentials; this access is limited to requests made within the US West (Oregon) (code: us-west-2) AWS region. While this compute location is required for direct S3 access, all data in Earthdata Cloud are still freely available via download.\n\nImport Required Packages\n\n# Suppress warnings\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\n\n# Direct access\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\n\n# Harmony\nimport geopandas as gpd\nimport geoviews as gv\ngv.extension('bokeh', 'matplotlib')\nfrom harmony import BBox, Client, Collection, Request, LinkType\nimport datetime as dt\nimport s3fs\n%matplotlib inline\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\nAbout earthaccess\nearthaccess leverages the Common Metadata Repository (CMR) API to search for collections and granules.\n\nAuthentication\nSearch\n\nTransition from search results to xarray\n\n\nAuthentication for NASA Earthdata\nAn Earthdata Login account is required to access data from NASA Earthdata. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up.\nThe first step is to get the correct authentication that will allow us to get cloud-hosted data from NASA. This is all done through Earthdata Login. We can use the earthaccess library here, where the login method also gets the correct AWS credentials.\n\nauth = earthaccess.login(strategy='netrc')\n\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 11/27/2023\nUsing .netrc file for EDL\n\n\n\nauth = earthaccess.login(strategy = 'interactive', \n                         persist = True)\n\n\n\nSearch for data\nEarthdata Search also uses the CMR API. Let’s head back to our Earthdata Search results to gather more information about our dataset of interest. The dataset “short name” can be found by clicking on the Info button on our collection search result, and we can paste that into a python variable.\n\n\n\nShortname\nCollection Concept ID\nDOI\n\n\n\n\nGPM_3IMERGDF\nC2723754864-GES_DISC\n10.5067/GPM/IMERGDF/DAY/07\n\n\nMOD10C1\nC1646609808-NSIDC_ECS\n10.5067/MODIS/MOD10C1.061\n\n\nSPL4SMGP\nC2531308461-NSIDC_ECS\n10.5067/EVKPQZ4AFC4D\n\n\nSPL4SMAU\nC2537927247-NSIDC_ECS\n10.5067/LWJ6TF5SZRG3\n\n\n\n\nSearch by collection\n\nshort_name = 'GPM_3IMERGDF'\ncol_id = 'C2723754864-GES_DISC'\n\n\nresults = earthaccess.search_data(\n    concept_id = col_id,\n    cloud_hosted = True,\n    count = 10    # Restricting to 10 records returned\n)\n\nGranules found: 8400\n\n\nIn this example we used the concept_id parameter to search from our desired collection. However, there are multiple ways to specify the collection(s) we are interested in. Alternative parameters include:\n\ndoi - request collection by digital object indentifier (e.g., doi = ‘10.5067/GPM/IMERGDF/DAY/07’)\n\nshort_name - request collection by CMR shortname (e.g., short_name = ‘GPM_3IMERGDF’)\n\nWe can refine our search by passing more parameters that describe the spatiotemporal domain of our use case. Here, we use the temporal parameter to request a date range.\n\ndate_range = (\"2022-11-19\", \"2023-04-06\")\nbbox = (-127.0761, 31.6444, -113.9039, 42.6310)\n\n\nresults = earthaccess.search_data(\n    concept_id = col_id,\n    cloud_hosted = True,\n    temporal = date_range,\n    bounding_box = bbox,\n)\n\nGranules found: 139\n\n\nWe can use the bounding_box parameter to further refine our request to return data assets that intersect with our desired bounding box.\n\nbbox = (-127.0761, 31.6444, -113.9039, 42.6310)\n\n\nresults = earthaccess.search_data(\n    concept_id = col_id,\n    cloud_hosted = True,\n    temporal = date_range,\n    bounding_box = bbox,\n)\n\nGranules found: 139\n\n\n\nThe short_name and concept_id search parameters can be used to request one or multiple collections per request, but the doi parameter can only request a single collection.\n> concept_id = [‘C2723754864-GES_DISC’, ‘C1646609808-NSIDC_ECS’]\n\nCMR concept IDs and collection DOIs are unique to each version of a data collection. However CMR shortnames are not. CMR shortnames can be associated with multiple versions of a collection, so it is recommended to use the short_name parameter and the version parameter in conjuction.\n\nUse the cloud_hosted search parameter only to search for data assets available from NASA’s Earthdata Cloud.\n\n\n\n\n\nExplore earthaccess search response\n\nprint(f'The results variable is a {type(results)} of {type(results[0])}')\n\nThe results variable is a <class 'list'> of <class 'earthaccess.results.DataGranule'>\n\n\n\no = results[0]\n\n\no.get_s3_credentials_endpoint()\n\n'https://data.gesdisc.earthdata.nasa.gov/s3credentials'\n\n\n\no.\n\n['https://data.gesdisc.earthdata.nasa.gov/data/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4']\n\n\n\npprint(results[0])\n\n\nsearch_params = {\n    \"concept_id\": \"C2408009906-LPCLOUD\", # CMR concept ID for EMITL1BRAD.001\n    #\"day_night_flag\": \"day\",\n    \"cloud_cover\": (0, 10),\n    \"temporal\": (\"2022-05\", \"2023-08\"),\n    \"bounding_box\": (-99.65, 18.85, -98.5, 19.95)\n}\nresults = earthaccess.search_data(**search_params)\n\nGranules found: 2\n\n\n\nd = results[0]\nd.data_links()\n\n['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230216T212513_2304714_028/EMIT_L1B_RAD_001_20230216T212513_2304714_028.nc',\n 'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230216T212513_2304714_028/EMIT_L1B_OBS_001_20230216T212513_2304714_028.nc']\n\n\n\n[x.data_links() for x in results]\n\n[['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230216T212513_2304714_028/EMIT_L1B_RAD_001_20230216T212513_2304714_028.nc',\n  'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230216T212513_2304714_028/EMIT_L1B_OBS_001_20230216T212513_2304714_028.nc'],\n ['https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230224T181429_2305512_036/EMIT_L1B_RAD_001_20230224T181429_2305512_036.nc',\n  'https://data.lpdaac.earthdatacloud.nasa.gov/lp-prod-protected/EMITL1BRAD.001/EMIT_L1B_RAD_001_20230224T181429_2305512_036/EMIT_L1B_OBS_001_20230224T181429_2305512_036.nc']]\n\n\n\n\n\n263\n\n\n\n\nAccess data\nOur code will work the same way if we are running it “in-region”, within our shared cloud environment, or locally from our laptop.\nSince we are working in the AWS us-west-2 region, we can stream data directly to xarray. We are using the open_mfdataset() (multi-file) method, which is required when using earthaccess.\n\nds = xr.open_mfdataset(earthaccess.open(results))\nds\n\n\n\nSubset data\nWe can create a subsetted xarray dataset by extracting the SLA variable and slicing the dataset by a smaller area of interest near the state of Baja, Mexico.\n\nds_subset = ds['SLA'].sel(Latitude=slice(15.8, 35.9), Longitude=slice(234.5,260.5)) \nds_subset\n\nUse the built-in plotting function of xarray to create a plot of SLA standard deviation over time:\n\nds_subset.std('Time').plot(figsize=(10,6), x='Longitude', y='Latitude');"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#harmony-py-xarray",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#harmony-py-xarray",
    "title": "NASA Earthdata Cloud Clinic",
    "section": "2. harmony-py + xarray",
    "text": "2. harmony-py + xarray\nWe will be accessing a subsetted NetCDF-4 file using Transformation Services in the Cloud.\nUsing Earthdata Search, we can find datasets that support these services using the “Customizable” filter.\nWe will find, request, and open customized data using Harmony, below.\n\nDefine area of interest\nFirst, use geopandas to read in a geojson file containing a polygon feature over the Gulf of Mexico. The geojson file is found in the ~/data directory.\n\ngeojson_path = './data/gulf.json'\ngdf = gpd.read_file(geojson_path) #Return a GeoDataFrame object\n\nWe can plot the polygon using the geoviews package that we imported as gv with ‘bokeh’ and ‘matplotlib’ extensions. The following has reasonable width, height, color, and line widths to view our polygon when it is overlayed on a base tile map. We can view this with the * operator.\n\nbase = gv.tile_sources.EsriImagery.opts(width=650, height=500)\nocean_map = gv.Polygons(gdf).opts(line_color='yellow', line_width=5, color=None)\nbase * ocean_map\n\n\n\nCreate a subset request\nHere we’ll create a request for a spatial subset of data.\nFirst, we need to create a Harmony Client, which is what we will interact with to submit and inspect a data request to Harmony, as well as to retrieve results.\nWhen creating the Client, we need to provide Earthdata Login credentials. This basic line below assumes that we have a .netrc available. See the Earthdata Cloud Cookbook appendix for more information on Earthdata Login and netrc setup.\n\nharmony_client = Client()\n\nSee the harmony-py documentation for details on how to construct your request.\n\nsst_short_name=\"MUR-JPL-L4-GLOB-v4.1\"\n\nrequest = Request(\n    collection=Collection(id=sst_short_name),\n    shape=geojson_path,\n    temporal={\n    'start': dt.datetime(2021, 8, 1, 1),\n    'stop': dt.datetime(2021, 8, 1, 2)   \n    },\n)\n\n\n\nSubmit a subset request\nNow that the request is created, we can now submit it to Harmony using the Harmony Client object. A job id is returned, which is a unique identifier that represents the submitted request.\n\njob_id = harmony_client.submit(request)\njob_id\n\n\n\nCheck request status\nDepending on the size of the request, it may be helpful to wait until the request has completed processing before the remainder of the code is executed. The wait_for_processing() method will block subsequent lines of code while optionally showing a progress bar.\n\nharmony_client.wait_for_processing(job_id, show_progress=True)\n\nWe can view Harmony job response and output URLs Once the data request has finished processing, we can view details on the job that was submitted to Harmony, including the API call to Harmony, and informational messages on the request if available.\nresult_json() calls wait_for_processing() and returns the complete job in JSON format once processing is complete.\n\ndata = harmony_client.result_json(job_id)\npprint(data)\n\n\n\nAccess data\nJust like above, the subsetted outputs produced by Harmony can be accessed directly from the cloud.\nFirst, we’ll retrieve list of output URLs.\nThe result_urls() method calls wait_for_processing() and returns a list of the processed data URLs once processing is complete. You may optionally show the progress bar as shown below.\n\nresults = harmony_client.result_urls(job_id, link_type=LinkType.s3)\nurls = list(results)\nurl = urls[0]\nprint(url)\n\nUsing aws_credentials you can retrieve the credentials needed to access the Harmony s3 staging bucket and its contents.\n\ncreds = harmony_client.aws_credentials()\n\n\n\nOpen staged files with s3fs and xarray\nWe use the AWS s3fs package to create a file system that can then be read by xarray:\n\ns3_fs = s3fs.S3FileSystem(\n    key=creds['aws_access_key_id'],\n    secret=creds['aws_secret_access_key'],\n    token=creds['aws_session_token'],\n    client_kwargs={'region_name':'us-west-2'},\n)\n\nNow that we have our s3 file system set, including our declared credentials, we’ll use that to open the url, and read in the file through xarray. This extra step is needed because xarray cannot open the S3 location directly. Instead, the S3 file object is passed to xarray, in order to then open the dataset.\n\nf = s3_fs.open(url, mode='rb')\nds = xr.open_dataset(f)\nds\n\nAs before, we use the xarray built in plotting function to create a simple plot along the x and y dimensions of the dataset. We can see that the data are subsetted to our polygon:\n\nds.analysed_sst.plot();"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#additional-resources",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#additional-resources",
    "title": "NASA Earthdata Cloud Clinic",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nTutorials\nThis clinic was based off of several notebook tutorials including those presented during past workshop events, along with other materials co-created by the NASA Openscapes mentors: * 2021 Earthdata Cloud Hackathon * 2021 AGU Workshop * Accessing and working with ICESat-2 data in the cloud * Analyzing Sea Level Rise Using Earth Data in the Cloud\n\n\nCloud services\nThe examples used in the clinic provide an abbreviated and simplified workflow to explore access and subsetting options available through the Earthdata Cloud. There are several other options that can be used to interact with data in the Earthdata Cloud including:\n\nOPeNDAP\n\nHyrax provides direct access to subsetting of NASA data using Python or your favorite analysis tool\nTutorial highlighting OPeNDAP usage: https://nasa-openscapes.github.io/earthdata-cloud-cookbook/how-tos/working-locally/Earthdata_Cloud__Data_Access_OPeNDAP_Example.html\n\nZarr-EOSDIS-Store\n\nThe zarr-eosdis-store library allows NASA EOSDIS Collections to be accessed efficiently by the Zarr Python library, provided they have a sidecar DMR++ metadata file generated.\nTutorial highlighting this library’s usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/09_Zarr_Access.html\n\n\n\n\nSupport\n\nEarthdata Forum\n\nUser Services and community support for all things NASA Earthdata, including Earthdata Cloud\n\nEarthdata Webinar series\n\nWebinars from DAACs and other groups across EOSDIS including guidance on working with Earthdata Cloud\nSee the Earthdata YouTube channel for more videos"
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. Please remember your username and password!\n\n\n\nA GitHub account is required to gain access to the provided 2i2c cloud computing platform. Please visit https://github.com/join to register and create a free GitHub account. Make sure you have sent your username to the workshop leaders once you have done so for access to our cloud computing environment.\n\n\n\nParticipation in the exercises requires a laptop or tablet. Yes, a tablet works too! All participants will have access to a 2i2c Jupyter Lab instance running in AWS us-west 2."
  },
  {
    "objectID": "schedule.html#closing---close-out-your-jupyter-hub",
    "href": "schedule.html#closing---close-out-your-jupyter-hub",
    "title": "Schedule",
    "section": "Closing - Close out your Jupyter Hub!",
    "text": "Closing - Close out your Jupyter Hub!\n\nClose out your JupyterHub instance if you are finished for the day, following these instructions.\nYou will continue to have access to the 2i2c JupyterHub in AWS for two weeks following this Workshop. You may use that time to continue work and all learn more about migrating data access routines and science workflows to the Cloud. This cloud compute environment is supported by the NASA Openscapes project.\n\n\nThank you!"
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Workshop Slides",
    "section": "",
    "text": "TODO: embed slides"
  }
]