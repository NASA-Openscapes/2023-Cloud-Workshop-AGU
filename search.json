[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "",
    "text": "Welcome to the 2023 NASA Openscapes AGU Workshop hosted by NASA Openscapes!\nThe workshop will take place in person and virtually at AGU on Sunday, December 10, 2023 from 1pm-4:30pm PST (UTC-7)."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "",
    "text": "Welcome to the 2023 NASA Openscapes AGU Workshop hosted by NASA Openscapes!\nThe workshop will take place in person and virtually at AGU on Sunday, December 10, 2023 from 1pm-4:30pm PST (UTC-7)."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "About",
    "text": "About\n\nWorkshop Goals\n\nProvide an inclusive place to learn about and experience working with NASA Earthdata Cloud;\nProvide strategies and best practices for finding and accessing NASA Earthdata Cloud data to help promote interdisciplinary research. Specifically, participants will learn how to access data from AWS S3 buckets and have a better understanding of the Python ecosystem used to analyze the data depending on size and data formats;\nBetter understand the needs of Earthdata data scientists by providing a pre/post survey and engaging in discussions with workshop participants;\nIdentify and practice using popular open source tools and utilities.\n\n\n\nWorkshop Description\nEarth science data, including NASA Earthdata, is increasingly more available from the cloud. By leveraging cloud compute resources, open science principles, and technologies that foster transparency and reproducibility, science can be done at rates and scales that are not achievable by using personal/local machines. Building modern data skills in a friendly environment is crucial for accelerating science and reducing barriers to inclusive scientific research. In this workshop, NASA Openscapes Mentors from NASA’s Earth Observing System Data and Information System (EOSDIS) DAACs (data centers) will teach the foundations of an open science mindset and apply these concepts to work in the cloud with NASA Earthdata. Participants will take part in hands-on tutorials using a JupyterHub managed by 2i2c in AWS. Participants will leave with a better understanding of how to leverage data and services from NASA Earthdata Cloud within their work across a variety of disciplines and data types, as well as how to apply the concepts of open science as a daily practice. The workshop will encourage discussion and reflection on how Earth science is evolving. Tutorials will be taught in Python. The target audience is anyone interested in using NASA Earth Science data within the AWS cloud. Previous experience in the AWS cloud is not necessary. Experience using Python is recommended but not required.\n\n\nLearning Outcomes\nUpon completion of the proposed workshop, participants will leave with a better understanding of how NASA Earthdata Cloud data and services can best be leveraged and integrated within their work across a variety of disciplines and data types, while being exposed to open science practices and workflows in Python. Participants will be engaged on two different levels: (1) through an open science mindset, and (2) through science use cases that demonstrate capabilities for efficient data discovery, access, and use within the cloud. These learning objectives will encourage discussion and reflection on how the Earth science, data science, and informatics communities are evolving, and how this evolution presents challenges and opportunities in scientific research."
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Enabling Analysis in the Cloud Using NASA Earth Science Data",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis Workshop has been developed as a cross-DAAC collaboration by the NASA-Openscapes Team. Learn more at nasa-openscapes.github.io."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Workshop Slides",
    "section": "",
    "text": "TODO: embed slides"
  },
  {
    "objectID": "slides.html#enabling-analysis-in-the-cloud-using-nasa-earth-science-data",
    "href": "slides.html#enabling-analysis-in-the-cloud-using-nasa-earth-science-data",
    "title": "Workshop Slides",
    "section": "",
    "text": "TODO: embed slides"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html",
    "title": "Data discovery with earthaccess",
    "section": "",
    "text": "In this example we will use the earthaccess library to search for data collections from NASA Earthdata. earthaccess is a Python library that simplifies data discovery and access to NASA Earth science data by providing an abstraction layer for NASA’s Common Metadata Repository (CMR) API Search API. The library makes searching for data more approachable by using a simpler notation instead of low level HTTP queries. earthaccess takes the trouble out of Earthdata Login authentication, makes search easier, and provides a stream-line way to download or stream search results into an xarray object."
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#summary",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#summary",
    "title": "Data discovery with earthaccess",
    "section": "",
    "text": "In this example we will use the earthaccess library to search for data collections from NASA Earthdata. earthaccess is a Python library that simplifies data discovery and access to NASA Earth science data by providing an abstraction layer for NASA’s Common Metadata Repository (CMR) API Search API. The library makes searching for data more approachable by using a simpler notation instead of low level HTTP queries. earthaccess takes the trouble out of Earthdata Login authentication, makes search easier, and provides a stream-line way to download or stream search results into an xarray object."
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#prerequisites",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#prerequisites",
    "title": "Data discovery with earthaccess",
    "section": "Prerequisites",
    "text": "Prerequisites\nAn Earthdata Login account is required to access data from NASA Earthdata. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up."
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#learning-objectives",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#learning-objectives",
    "title": "Data discovery with earthaccess",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nHow to authenticate with earthaccess\nHow to use earthaccess to search for data using spatial and temporal filters\nHow to explore and work with search results"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#get-started",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#get-started",
    "title": "Data discovery with earthaccess",
    "section": "Get Started",
    "text": "Get Started\n\nImport Required Packages\n\nimport earthaccess \nfrom pprint import pprint\nimport xarray as xr\nimport geopandas as gpd\n\n\n\nAuthentication for NASA Earthdata\nWe will start by authenticating using our Earthdata Login credentials. Authentication is not necessarilly needed to search for publically available data collections in Earthdata, but is always need to download or access data from the NASA Earthdata archives. We can use login method from the earthaccess library here. This will create a authenticated session using our Earthdata Login credential. Our credentials can be passed along via environmental variables or by a .netrc file save in the home/user profile directory. If your credentials are not available in either location, we will be prompt to input our credentials and a .netrc will be created and saved for us.\n\nauth = earthaccess.login()\n# are we authenticated?\nif not auth.authenticated:\n    # ask for credentials and persist them in a .netrc file\n    auth.login(strategy=\"interactive\", persist=True)\n\nEARTHDATA_USERNAME and EARTHDATA_PASSWORD are not set in the current environment, try setting them or use a different strategy (netrc, interactive)\nYou're now authenticated with NASA Earthdata Login\nUsing token with expiration date: 11/27/2023\nUsing .netrc file for EDL\n\n\n\n\nSearch for data\nThere are multiple keywords we can use to discovery data from collections. The table below contains the short_name, concept_id, and doi for some collections we are interested in for other exercises. Each of these can be used to search for data or information related to the collection we are interested in.\n\n\n\nShortname\nCollection Concept ID\nDOI\n\n\n\n\nGPM_3IMERGDF\nC2723754864-GES_DISC\n10.5067/GPM/IMERGDF/DAY/07\n\n\nMOD10C1\nC1646609808-NSIDC_ECS\n10.5067/MODIS/MOD10C1.061\n\n\nSPL4SMGP\nC2531308461-NSIDC_ECS\n10.5067/EVKPQZ4AFC4D\n\n\nSPL4SMAU\nC2537927247-NSIDC_ECS\n10.5067/LWJ6TF5SZRG3\n\n\n\n add Earthdata search/cmr search walkthrough\n investigate if there is a keyword search for collections…precip\n\nSearch by collection\n\nQuery = earthaccess.collection_query().keyword('precip*')\n\nprint(f'Collections found: {Query.hits()}')\n\nCollections found: 1498\n\n\n\ncollections = Query.fields(['ShortName','DOI','Abstract']).get_all()\n# Inspect 3 results printing just the ShortName and Abstract\ncollections[0]\n\n{\n  \"meta\": {\n    \"concept-id\": \"C2368306937-GES_DISC\",\n    \"granule-count\": 38593,\n    \"provider-id\": \"GES_DISC\"\n  },\n  \"umm\": {\n    \"ShortName\": \"PRECIP_GMI_GPM\",\n    \"DOI\": {\n      \"DOI\": \"10.5067/MEASURES/GPM/GMI/DATA201\"\n    },\n    \"Abstract\": \"The data presented in this level 2 orbital product are rain rate estimates expressed as mm/hour determined from brightness temperatures (Tbs) obtained from the Global Precipitation Measurement (GPM) Microwave Imager (GMI) flown on the GPM satellite. Most of the products generated in this data set are based upon the algorithms developed for the 3rd Algorithm Intercomparison Project (AIP-3) of the Global Precipitation Climatology Project (GPCP).  Details of these 15 algorithms and development of a quality score which is a measure of confidence in the estimate, along with processing and algorithmic flags, can be found in the Algorithm Theoretical Basis Document  (ATBD).  The data in this product cover the period from 2014 to 2020 with one file per orbit.\"\n  }\n}\n\n\n\ncollection_id = 'C2723754864-GES_DISC'\n\n\nresults = earthaccess.search_data(\n    concept_id = collection_id,\n    cloud_hosted = True,\n    count = 10    # Restricting to 10 records returned\n)\n\nGranules found: 8400\n\n\nIn this example we used the concept_id parameter to search from our desired collection. However, there are multiple ways to specify the collection(s) we are interested in. Alternative parameters include:\n\ndoi - request collection by digital object indentifier (e.g., doi = ‘10.5067/GPM/IMERGDF/DAY/07’)\n\nshort_name - request collection by CMR shortname (e.g., short_name = ‘GPM_3IMERGDF’)\n\nNOTE: Each Earthdata collect has a unique concept_id and doi. This is not the case with short_name. A shortname can be associated with multiple versions of a collection. If multiple versions of a collection are publically available, using the short_name parameter with return all versions available. It is advised to use the version parameter in conjuction with the short_name parameter with searching.\nWe can refine our search by passing more parameters that describe the spatiotemporal domain of our use case. Here, we use the temporal parameter to request a date range and the bounding_box parameter to request granules that intersect with a bounding box.\nFor our bounding box, we are going to read in a GeoJSON file containing a single feature and extract the coordinate pairs for the southeast corner and the northwest corner (or lowerleft and upperright corners) of the bounding box around the feature.\n\ninGeojson = gpd.read_file('../../2023-Cloud-Workshop-AGU/data/sf_to_sierranvmt.geojson')\n\n\nxmin, ymin, xmax, ymax = inGeojson.total_bounds\n\nWe will assign our start date and end date to a varialbe named date_range and we’ll assign the southeast and the northwest corner coordinates to a variable named bbox to be passed to our earthaccess search request.\n\ndate_range = (\"2022-11-19\", \"2023-04-06\")\n#bbox = (-127.0761, 31.6444, -113.9039, 42.6310)\nbbox = (xmin, ymin, xmax, ymax)\n\n\nresults = earthaccess.search_data(\n    concept_id = collection_id,\n    cloud_hosted = True,\n    temporal = date_range,\n    bounding_box = bbox,\n)\n\nGranules found: 139\n\n\n\nThe short_name and concept_id search parameters can be used to request one or multiple collections per request, but the doi parameter can only request a single collection.\n&gt; concept_ids = [‘C2723754864-GES_DISC’, ‘C1646609808-NSIDC_ECS’]\n\nUse the cloud_hosted search parameter only to search for data assets available from NASA’s Earthdata Cloud.\nThere are even more search parameters that can be passed to help refine our search, however those parameters do have to be populated in the CMR record to be leveraged. A non exhaustive list of examples are below:\n\nday_night_flag = 'day'\n\ncloud_cover = (0, 10)\n\n\n\n# col_ids = ['C2723754864-GES_DISC', 'C1646609808-NSIDC_ECS', 'C2531308461-NSIDC_ECS', 'C2537927247-NSIDC_ECS']    # Specify a list of collections to pass to the search\n\n# results = earthaccess.search_data(\n#     concept_id = col_ids,\n#     #cloud_hosted = True,\n#     temporal = date_range,\n#     bounding_box = bbox,\n# )\n\n\n\n\nWorking with earthaccess returns\nearthaccess provides several convienence methods to help streamline processes that historically have be painful when done using traditional methods. Following the search for data, you’ll likely take one of two pathways with those results. You may choose to download the assets that have been returned to you or you may choose to continue working with the search results within the Python environment.\n\nDownload earthaccess results\nIn some cases you may want to download your assets. earthaccess makes downloading the data from the search results very easy using the earthaccess.download() function.\n\ndownloaded_files = earthaccess.download(\n    results[0:9],\n    local_path='../../2023-Cloud-Workshop-AGU/data',\n)\n\n Getting 9 granules, approx download size: 0.25 GB\nFile 3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221121-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221120-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221122-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221123-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221125-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221126-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221124-S000000-E235959.V07.nc4 already downloaded\nFile 3B-DAY.MS.MRG.3IMERG.20221127-S000000-E235959.V07.nc4 already downloaded\n\n\n\n\n\n\n\n\n\n\n\nThat was easy! earthaccess did a lot of heavy lifting for us. It identified the downloadable links, passed our Earthdata Login credentials, and save off the file with the proper name.\n\n\nExplore earthaccess search response\n\nprint(f'The results variable is a {type(results)} of {type(results[0])}')\n\nThe results variable is a &lt;class 'list'&gt; of &lt;class 'earthaccess.results.DataGranule'&gt;\n\n\n\nlen(results)\n\n139\n\n\nWe can explore the first item (earthaccess.results.DataGranule) in our list.\n\nitem = results[0]\ntype(item)\n\nearthaccess.results.DataGranule\n\n\nEach item contains three keys that can be used to explore the item\n\nitem.keys()\n\ndict_keys(['meta', 'umm', 'size'])\n\n\n\nitem['umm']\n\n{'RelatedUrls': [{'URL': 'https://data.gesdisc.earthdata.nasa.gov/data/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n   'Type': 'GET DATA',\n   'Description': 'Download 3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4'},\n  {'URL': 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n   'Type': 'GET DATA VIA DIRECT ACCESS',\n   'Description': 'This link provides direct download access via S3 to the granule'},\n  {'URL': 'https://gpm1.gesdisc.eosdis.nasa.gov/opendap/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n   'Type': 'USE SERVICE API',\n   'Subtype': 'OPENDAP DATA',\n   'Description': 'The OPENDAP location for the granule.',\n   'MimeType': 'application/x-netcdf-4'},\n  {'URL': 'https://data.gesdisc.earthdata.nasa.gov/s3credentials',\n   'Type': 'VIEW RELATED INFORMATION',\n   'Description': 'api endpoint to retrieve temporary credentials valid for same-region direct s3 access'}],\n 'SpatialExtent': {'HorizontalSpatialDomain': {'Geometry': {'BoundingRectangles': [{'WestBoundingCoordinate': -180.0,\n      'EastBoundingCoordinate': 180.0,\n      'NorthBoundingCoordinate': 90.0,\n      'SouthBoundingCoordinate': -90.0}]}}},\n 'ProviderDates': [{'Date': '2023-08-25T14:06:33.000Z', 'Type': 'Insert'},\n  {'Date': '2023-08-25T14:06:33.000Z', 'Type': 'Update'}],\n 'CollectionReference': {'ShortName': 'GPM_3IMERGDF', 'Version': '07'},\n 'DataGranule': {'DayNightFlag': 'Unspecified',\n  'Identifiers': [{'Identifier': '3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n    'IdentifierType': 'ProducerGranuleId'}],\n  'ProductionDateTime': '2023-08-25T14:06:33.000Z',\n  'ArchiveAndDistributionInformation': [{'Name': 'Not provided',\n    'Size': 28.37006378173828,\n    'SizeUnit': 'MB'}]},\n 'TemporalExtent': {'RangeDateTime': {'BeginningDateTime': '2022-11-19T00:00:00.000Z',\n   'EndingDateTime': '2022-11-19T23:59:59.999Z'}},\n 'GranuleUR': 'GPM_3IMERGDF.07:3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n 'MetadataSpecification': {'URL': 'https://cdn.earthdata.nasa.gov/umm/granule/v1.6.5',\n  'Name': 'UMM-G',\n  'Version': '1.6.5'}}\n\n\n\n\nGet data URLs / S3 URIs\nGet links to data. The data_links() method is used to return the URL(s)/data link(s) for the item. By defalt the method returns the HTTPS URL to download or access the item.\n\nitem.data_links()\n\n['https://data.gesdisc.earthdata.nasa.gov/data/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4']\n\n\nThe data_links() method can also be used to get the s3 URI when we want to perform direct s3 access of the data in the cloud. To get the s3 URI, pass access = 'direct' to the method.\n\nitem.data_links(access='direct')\n\n['s3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4']\n\n\nIf we want to extract all of the data links from our search results and add or save them to a list, we can.\n\ndata_link_list = []\n\nfor granule in results:\n    for asset in granule.data_links(access='direct'):\n        data_link_list.append(asset)\n        \n\n\ndata_link_list[0:9]\n\n['s3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221119-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221120-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221121-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221122-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221123-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221124-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221125-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221126-S000000-E235959.V07.nc4',\n 's3://gesdisc-cumulus-prod-protected/GPM_L3/GPM_3IMERGDF.07/2022/11/3B-DAY.MS.MRG.3IMERG.20221127-S000000-E235959.V07.nc4']\n\n\nWe can pass or read these lists of data links into libraries like xarray, rioxarray, or gdal, but earthaccess has a built-in module for easily reading these data links in.\n\n\nPass results to xarray\nWe pass the earthaccess.open() function to\n\nfileset = earthaccess.open(results)\n\n Opening 139 granules, approx size: 3.75 GB\nusing endpoint: https://data.gesdisc.earthdata.nasa.gov/s3credentials\n\n\n\n\n\n\n\n\n\n\n\n\nds = xr.open_mfdataset(fileset, chunks = {})\n\nSome really cool things just happened here! Not only were we able to seamlessly stream our earthaccess search results into a xarray dataset using the open_mfdataset() (multi-file) method, but earthaccess determined that we were working from within AWS us-west-2 and accessed the data via direct S3 access! We didn’t have to create a session or a filesystem to authenicate and connect to the data. earthaccess did this for us using the auth object we created at the beginning of this tutorial. If we were not working in AWS us-west-2, earthaccess would “automagically” switch to accessing the data via the HTTPS endpoints and would again handle the authentication for us.\nLet’s take a quick lock at our xarray dataset\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                         (time: 139, lon: 3600, lat: 1800, nv: 2)\nCoordinates:\n  * lon                             (lon) float32 -179.9 -179.9 ... 179.9 179.9\n  * lat                             (lat) float64 -89.95 -89.85 ... 89.85 89.95\n  * time                            (time) datetime64[ns] 2022-11-19 ... 2023...\nDimensions without coordinates: nv\nData variables:\n    precipitation                   (time, lon, lat) float32 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    precipitation_cnt               (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    precipitation_cnt_cond          (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    MWprecipitation                 (time, lon, lat) float32 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    MWprecipitation_cnt             (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    MWprecipitation_cnt_cond        (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    randomError                     (time, lon, lat) float32 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    randomError_cnt                 (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    probabilityLiquidPrecipitation  (time, lon, lat) int8 dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n    time_bnds                       (time, nv) datetime64[ns] dask.array&lt;chunksize=(1, 2), meta=np.ndarray&gt;\nAttributes:\n    BeginDate:       2022-11-19\n    BeginTime:       00:00:00.000Z\n    EndDate:         2022-11-19\n    EndTime:         23:59:59.999Z\n    FileHeader:      StartGranuleDateTime=2022-11-19T00:00:00.000Z;\\nStopGran...\n    InputPointer:    3B-HHR.MS.MRG.3IMERG.20221119-S000000-E002959.0000.V07A....\n    title:           GPM IMERG Final Precipitation L3 1 day 0.1 degree x 0.1 ...\n    DOI:             10.5067/GPM/IMERGDF/DAY/07\n    ProductionTime:  2023-08-25T14:03:25.792Zxarray.DatasetDimensions:time: 139lon: 3600lat: 1800nv: 2Coordinates: (3)lon(lon)float32-179.9 -179.9 ... 179.9 179.9units :degrees_eastlong_name :Longitudearray([-179.95, -179.85, -179.75, ...,  179.75,  179.85,  179.95],\n      dtype=float32)lat(lat)float64-89.95 -89.85 ... 89.85 89.95units :degrees_northlong_name :Latitudearray([-89.95, -89.85, -89.75, ...,  89.75,  89.85,  89.95])time(time)datetime64[ns]2022-11-19 ... 2023-04-06standard_name :timelong_name :timebounds :time_bndsarray(['2022-11-19T00:00:00.000000000', '2022-11-20T00:00:00.000000000',\n       '2022-11-21T00:00:00.000000000', '2022-11-22T00:00:00.000000000',\n       '2022-11-23T00:00:00.000000000', '2022-11-24T00:00:00.000000000',\n       '2022-11-25T00:00:00.000000000', '2022-11-26T00:00:00.000000000',\n       '2022-11-27T00:00:00.000000000', '2022-11-28T00:00:00.000000000',\n       '2022-11-29T00:00:00.000000000', '2022-11-30T00:00:00.000000000',\n       '2022-12-01T00:00:00.000000000', '2022-12-02T00:00:00.000000000',\n       '2022-12-03T00:00:00.000000000', '2022-12-04T00:00:00.000000000',\n       '2022-12-05T00:00:00.000000000', '2022-12-06T00:00:00.000000000',\n       '2022-12-07T00:00:00.000000000', '2022-12-08T00:00:00.000000000',\n       '2022-12-09T00:00:00.000000000', '2022-12-10T00:00:00.000000000',\n       '2022-12-11T00:00:00.000000000', '2022-12-12T00:00:00.000000000',\n       '2022-12-13T00:00:00.000000000', '2022-12-14T00:00:00.000000000',\n       '2022-12-15T00:00:00.000000000', '2022-12-16T00:00:00.000000000',\n       '2022-12-17T00:00:00.000000000', '2022-12-18T00:00:00.000000000',\n       '2022-12-19T00:00:00.000000000', '2022-12-20T00:00:00.000000000',\n       '2022-12-21T00:00:00.000000000', '2022-12-22T00:00:00.000000000',\n       '2022-12-23T00:00:00.000000000', '2022-12-24T00:00:00.000000000',\n       '2022-12-25T00:00:00.000000000', '2022-12-26T00:00:00.000000000',\n       '2022-12-27T00:00:00.000000000', '2022-12-28T00:00:00.000000000',\n       '2022-12-29T00:00:00.000000000', '2022-12-30T00:00:00.000000000',\n       '2022-12-31T00:00:00.000000000', '2023-01-01T00:00:00.000000000',\n       '2023-01-02T00:00:00.000000000', '2023-01-03T00:00:00.000000000',\n       '2023-01-04T00:00:00.000000000', '2023-01-05T00:00:00.000000000',\n       '2023-01-06T00:00:00.000000000', '2023-01-07T00:00:00.000000000',\n       '2023-01-08T00:00:00.000000000', '2023-01-09T00:00:00.000000000',\n       '2023-01-10T00:00:00.000000000', '2023-01-11T00:00:00.000000000',\n       '2023-01-12T00:00:00.000000000', '2023-01-13T00:00:00.000000000',\n       '2023-01-14T00:00:00.000000000', '2023-01-15T00:00:00.000000000',\n       '2023-01-16T00:00:00.000000000', '2023-01-17T00:00:00.000000000',\n       '2023-01-18T00:00:00.000000000', '2023-01-19T00:00:00.000000000',\n       '2023-01-20T00:00:00.000000000', '2023-01-21T00:00:00.000000000',\n       '2023-01-22T00:00:00.000000000', '2023-01-23T00:00:00.000000000',\n       '2023-01-24T00:00:00.000000000', '2023-01-25T00:00:00.000000000',\n       '2023-01-26T00:00:00.000000000', '2023-01-27T00:00:00.000000000',\n       '2023-01-28T00:00:00.000000000', '2023-01-29T00:00:00.000000000',\n       '2023-01-30T00:00:00.000000000', '2023-01-31T00:00:00.000000000',\n       '2023-02-01T00:00:00.000000000', '2023-02-02T00:00:00.000000000',\n       '2023-02-03T00:00:00.000000000', '2023-02-04T00:00:00.000000000',\n       '2023-02-05T00:00:00.000000000', '2023-02-06T00:00:00.000000000',\n       '2023-02-07T00:00:00.000000000', '2023-02-08T00:00:00.000000000',\n       '2023-02-09T00:00:00.000000000', '2023-02-10T00:00:00.000000000',\n       '2023-02-11T00:00:00.000000000', '2023-02-12T00:00:00.000000000',\n       '2023-02-13T00:00:00.000000000', '2023-02-14T00:00:00.000000000',\n       '2023-02-15T00:00:00.000000000', '2023-02-16T00:00:00.000000000',\n       '2023-02-17T00:00:00.000000000', '2023-02-18T00:00:00.000000000',\n       '2023-02-19T00:00:00.000000000', '2023-02-20T00:00:00.000000000',\n       '2023-02-21T00:00:00.000000000', '2023-02-22T00:00:00.000000000',\n       '2023-02-23T00:00:00.000000000', '2023-02-24T00:00:00.000000000',\n       '2023-02-25T00:00:00.000000000', '2023-02-26T00:00:00.000000000',\n       '2023-02-27T00:00:00.000000000', '2023-02-28T00:00:00.000000000',\n       '2023-03-01T00:00:00.000000000', '2023-03-02T00:00:00.000000000',\n       '2023-03-03T00:00:00.000000000', '2023-03-04T00:00:00.000000000',\n       '2023-03-05T00:00:00.000000000', '2023-03-06T00:00:00.000000000',\n       '2023-03-07T00:00:00.000000000', '2023-03-08T00:00:00.000000000',\n       '2023-03-09T00:00:00.000000000', '2023-03-10T00:00:00.000000000',\n       '2023-03-11T00:00:00.000000000', '2023-03-12T00:00:00.000000000',\n       '2023-03-13T00:00:00.000000000', '2023-03-14T00:00:00.000000000',\n       '2023-03-15T00:00:00.000000000', '2023-03-16T00:00:00.000000000',\n       '2023-03-17T00:00:00.000000000', '2023-03-18T00:00:00.000000000',\n       '2023-03-19T00:00:00.000000000', '2023-03-20T00:00:00.000000000',\n       '2023-03-21T00:00:00.000000000', '2023-03-22T00:00:00.000000000',\n       '2023-03-23T00:00:00.000000000', '2023-03-24T00:00:00.000000000',\n       '2023-03-25T00:00:00.000000000', '2023-03-26T00:00:00.000000000',\n       '2023-03-27T00:00:00.000000000', '2023-03-28T00:00:00.000000000',\n       '2023-03-29T00:00:00.000000000', '2023-03-30T00:00:00.000000000',\n       '2023-03-31T00:00:00.000000000', '2023-04-01T00:00:00.000000000',\n       '2023-04-02T00:00:00.000000000', '2023-04-03T00:00:00.000000000',\n       '2023-04-04T00:00:00.000000000', '2023-04-05T00:00:00.000000000',\n       '2023-04-06T00:00:00.000000000'], dtype='datetime64[ns]')Data variables: (10)precipitation(time, lon, lat)float32dask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;units :mm/daylong_name :Daily mean precipitation rate (combined microwave-IR) estimate. Formerly precipitationCal.\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n3.36 GiB\n24.72 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\nprecipitation_cnt\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\ncount\n\nlong_name :\n\nCount of all valid half-hourly precipitation retrievals for the day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\nprecipitation_cnt_cond\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\ncount\n\nlong_name :\n\nCount of half-hourly precipitation retrievals for the day where precipitation is at least 0.01 mm/hr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\nMWprecipitation\n\n\n(time, lon, lat)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\nmm/day\n\nlong_name :\n\nDaily mean High Quality precipitation rate from all available microwave sources. Formerly HQprecipitation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n3.36 GiB\n24.72 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nMWprecipitation_cnt\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\ncount\n\nlong_name :\n\nCount of all valid half-hourly MWprecipitation retrievals for the day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\nMWprecipitation_cnt_cond\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\ncount\n\nlong_name :\n\nCount of half-hourly MWprecipitation retrievals for the day where precipitation is at least 0.01 mm/hr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\nrandomError\n\n\n(time, lon, lat)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\nmm/day\n\nlong_name :\n\nRoot-mean-square error estimate for combined microwave-IR daily precipitation rate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n3.36 GiB\n24.72 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n\n\n\n\n\nrandomError_cnt\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\ncount\n\nlong_name :\n\nCount of valid half-hourly randomError retrievals for the day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\nprobabilityLiquidPrecipitation\n\n\n(time, lon, lat)\n\n\nint8\n\n\ndask.array&lt;chunksize=(1, 3600, 1800), meta=np.ndarray&gt;\n\n\n\n\nunits :\n\npercent\n\nlong_name :\n\nProbability of liquid precipitation\n\ndescription :\n\nProbability of liquid precipitation estimated with a diagnostic parameterization using ancillary data. 0=missing values; 1=likely solid; 100=likely liquid or no precipitation. Screen by positive precipitation or precipitation_cnt_cond to locate meaningful probabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n858.99 MiB\n6.18 MiB\n\n\nShape\n(139, 3600, 1800)\n(1, 3600, 1800)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\nint8 numpy.ndarray\n\n\n\n\n\n\n\n\n\ntime_bnds\n\n\n(time, nv)\n\n\ndatetime64[ns]\n\n\ndask.array&lt;chunksize=(1, 2), meta=np.ndarray&gt;\n\n\n\n\ncoordinates :\n\ntime nv\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n2.17 kiB\n16 B\n\n\nShape\n(139, 2)\n(1, 2)\n\n\nDask graph\n139 chunks in 279 graph layers\n\n\nData type\ndatetime64[ns] numpy.ndarray\n\n\n\n\n\n\n\n\nIndexes: (3)lonPandasIndexPandasIndex(Float64Index([ -179.9499969482422, -179.85000610351562,             -179.75,\n              -179.64999389648438,  -179.5500030517578,  -179.4499969482422,\n              -179.35000610351562,             -179.25, -179.14999389648438,\n               -179.0500030517578,\n              ...\n                179.0500030517578,  179.14999389648438,              179.25,\n               179.35000610351562,   179.4499969482422,   179.5500030517578,\n               179.64999389648438,              179.75,  179.85000610351562,\n                179.9499969482422],\n             dtype='float64', name='lon', length=3600))latPandasIndexPandasIndex(Float64Index([            -89.95, -89.85000000000001,             -89.75,\n                          -89.65,             -89.55,             -89.45,\n              -89.35000000000001,             -89.25,             -89.15,\n                          -89.05,\n              ...\n                           89.05,  89.15000000000002,  89.25000000000001,\n               89.35000000000001,              89.45,              89.55,\n               89.65000000000002,  89.75000000000001,  89.85000000000001,\n                           89.95],\n             dtype='float64', name='lat', length=1800))timePandasIndexPandasIndex(DatetimeIndex(['2022-11-19', '2022-11-20', '2022-11-21', '2022-11-22',\n               '2022-11-23', '2022-11-24', '2022-11-25', '2022-11-26',\n               '2022-11-27', '2022-11-28',\n               ...\n               '2023-03-28', '2023-03-29', '2023-03-30', '2023-03-31',\n               '2023-04-01', '2023-04-02', '2023-04-03', '2023-04-04',\n               '2023-04-05', '2023-04-06'],\n              dtype='datetime64[ns]', name='time', length=139, freq=None))Attributes: (9)BeginDate :2022-11-19BeginTime :00:00:00.000ZEndDate :2022-11-19EndTime :23:59:59.999ZFileHeader :StartGranuleDateTime=2022-11-19T00:00:00.000Z;\nStopGranuleDateTime=2022-11-19T23:59:59.999ZInputPointer :3B-HHR.MS.MRG.3IMERG.20221119-S000000-E002959.0000.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S003000-E005959.0030.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S010000-E012959.0060.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S013000-E015959.0090.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S020000-E022959.0120.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S023000-E025959.0150.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S030000-E032959.0180.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S033000-E035959.0210.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S040000-E042959.0240.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S043000-E045959.0270.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S050000-E052959.0300.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S053000-E055959.0330.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S060000-E062959.0360.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S063000-E065959.0390.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S070000-E072959.0420.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S073000-E075959.0450.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S080000-E082959.0480.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S083000-E085959.0510.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S090000-E092959.0540.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S093000-E095959.0570.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S100000-E102959.0600.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S103000-E105959.0630.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S110000-E112959.0660.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S113000-E115959.0690.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S120000-E122959.0720.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S123000-E125959.0750.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S130000-E132959.0780.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S133000-E135959.0810.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S140000-E142959.0840.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S143000-E145959.0870.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S150000-E152959.0900.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S153000-E155959.0930.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S160000-E162959.0960.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S163000-E165959.0990.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S170000-E172959.1020.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S173000-E175959.1050.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S180000-E182959.1080.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S183000-E185959.1110.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S190000-E192959.1140.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S193000-E195959.1170.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S200000-E202959.1200.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S203000-E205959.1230.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S210000-E212959.1260.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S213000-E215959.1290.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S220000-E222959.1320.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S223000-E225959.1350.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S230000-E232959.1380.V07A.HDF5;3B-HHR.MS.MRG.3IMERG.20221119-S233000-E235959.1410.V07A.HDF5title :GPM IMERG Final Precipitation L3 1 day 0.1 degree x 0.1 degree (GPM_3IMERGDF)DOI :10.5067/GPM/IMERGDF/DAY/07ProductionTime :2023-08-25T14:03:25.792Z"
  },
  {
    "objectID": "tutorials/Earthdata_Search_Discovery_earthaccess.html#resources",
    "href": "tutorials/Earthdata_Search_Discovery_earthaccess.html#resources",
    "title": "Data discovery with earthaccess",
    "section": "Resources",
    "text": "Resources\n\nNASA’s Common Metadata Repository (CMR) API\n\nearthaccess repository\nearthaccess documentation\nEarthdata Search"
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. Please remember your username and password!\n\n\n\nA GitHub account is required to gain access to the provided 2i2c cloud computing platform. Please visit https://github.com/join to register and create a free GitHub account. Make sure you have sent your username to the workshop leaders via this Google Form once you have done so for access to our cloud computing environment.\n\n\n\nParticipation in the exercises requires a laptop or tablet. Yes, a tablet works too! All participants will have access to a 2i2c Jupyter Lab instance running in AWS us-west 2."
  },
  {
    "objectID": "prerequisites.html#before-the-workshop-you-will-need-the-following",
    "href": "prerequisites.html#before-the-workshop-you-will-need-the-following",
    "title": "Prerequisites",
    "section": "",
    "text": "An Earthdata Login account is required to access data, as well as discover restricted data, from the NASA Earthdata system. Thus, to access NASA data, you need Earthdata Login. Please visit https://urs.earthdata.nasa.gov to register and manage your Earthdata Login account. This account is free to create and only takes a moment to set up. Please remember your username and password!\n\n\n\nA GitHub account is required to gain access to the provided 2i2c cloud computing platform. Please visit https://github.com/join to register and create a free GitHub account. Make sure you have sent your username to the workshop leaders via this Google Form once you have done so for access to our cloud computing environment.\n\n\n\nParticipation in the exercises requires a laptop or tablet. Yes, a tablet works too! All participants will have access to a 2i2c Jupyter Lab instance running in AWS us-west 2."
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html",
    "href": "tutorials/Earthdata_Subset_and_Plot.html",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "",
    "text": "In these examples we will use the xarray, earthaccess, and harmony-py libraries to subset data and make figures using geoviews, matplotlib, and cartopy.\nWe will go through three examples of subsetting and plotting data in the Earthdata Cloud:\n\nExample 1 - Precipitation estimates from IMERG, Daily Level 3 data\nExample 2 - Snow cover data from MODIS/Terra, Daily Level 3 data\nExample 3 - harmony-py for direct cloud access & subsetting of precipitable water data from the DSCOVR EPIC Composite.\nAppendix - Another example of xarray subsetting & plotting with Snow mass data from SMAP, 3-hourly Level 4 data\n\nIn each example, we will be accessing data directly from Amazon Web Services (AWS), specifically in the us-west-2 region, which is where all cloud-hosted NASA Earthdata reside. This shared compute environment (JupyterHub) is also running in the same location. We will then load the data into Python as an xarray dataset.\nFor Harmony-py, we will demonstrate an example of pulling data via the cloud from an existing on-premise data server.\nSee the bottom of the notebook for additional resources, including several tutorials that that served as a foundation for this clinic. Includes: https://github.com/rupesh2/atmospheric_rivers/tree/main\nNote: “direct cloud access” is also called “direct S3 access” or simply “direct access”."
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#summary",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#summary",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "",
    "text": "In these examples we will use the xarray, earthaccess, and harmony-py libraries to subset data and make figures using geoviews, matplotlib, and cartopy.\nWe will go through three examples of subsetting and plotting data in the Earthdata Cloud:\n\nExample 1 - Precipitation estimates from IMERG, Daily Level 3 data\nExample 2 - Snow cover data from MODIS/Terra, Daily Level 3 data\nExample 3 - harmony-py for direct cloud access & subsetting of precipitable water data from the DSCOVR EPIC Composite.\nAppendix - Another example of xarray subsetting & plotting with Snow mass data from SMAP, 3-hourly Level 4 data\n\nIn each example, we will be accessing data directly from Amazon Web Services (AWS), specifically in the us-west-2 region, which is where all cloud-hosted NASA Earthdata reside. This shared compute environment (JupyterHub) is also running in the same location. We will then load the data into Python as an xarray dataset.\nFor Harmony-py, we will demonstrate an example of pulling data via the cloud from an existing on-premise data server.\nSee the bottom of the notebook for additional resources, including several tutorials that that served as a foundation for this clinic. Includes: https://github.com/rupesh2/atmospheric_rivers/tree/main\nNote: “direct cloud access” is also called “direct S3 access” or simply “direct access”."
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#learning-objectives",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#learning-objectives",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nExtract variables, temporal slices, and spatial slices from an xarray dataset\nPlot data and exclude data points via boolean conditions, using xarray, cartopy, matplotlib, and rasterio\nPlot a polygon geojson file with a basemap using geoviews\nConceptualize data subsetting services provided by NASA Earthdata, including Harmony\nUtilize the harmony-py library to request data over the Bay of San Francisco\n\n\nImport Required Packages\n\n# Suppress warnings\nimport warnings\nwarnings.simplefilter('ignore')\nwarnings.filterwarnings('ignore')\nfrom pprint import pprint\n\n# Direct access\nimport earthaccess\nfrom pathlib import Path\nimport xarray as xr\nxr.set_options(display_expand_attrs=False)\n\n# Harmony\nfrom harmony import BBox, Client, Collection, Request, LinkType, CapabilitiesRequest\nimport datetime as dt\nimport json\nimport numpy as np\n\n# Plotting\nimport geopandas as gpd\nimport geoviews as gv\nfrom geoviews import opts\ngv.extension('bokeh', 'matplotlib', logo=False)\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nfrom cartopy.mpl.ticker import LatitudeFormatter, LongitudeFormatter\nimport matplotlib.pyplot as plt\nimport rioxarray as rxr\n%matplotlib inline"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#picking-up-where-we-left-off",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#picking-up-where-we-left-off",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Picking up where we left off",
    "text": "Picking up where we left off\nWe will authenticate our Earthaccess session, and then open the results like we did in the Search & Discovery section.\n\nauth = earthaccess.login()\n# are we authenticated?\nif not auth.authenticated:\n    # ask for credentials and persist them in a .netrc file\n    auth.login(strategy=\"interactive\", persist=True)"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#example-1---xarray-subsetting---precipitation-estimates-from-imerg-daily-level-3",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#example-1---xarray-subsetting---precipitation-estimates-from-imerg-daily-level-3",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Example 1 - Xarray Subsetting - Precipitation estimates from IMERG, Daily Level 3",
    "text": "Example 1 - Xarray Subsetting - Precipitation estimates from IMERG, Daily Level 3\n\nDataset\nWe will use the GPM IMERG Final Precipitation L3 Daily dataset for this tutorial. The IMERG Precipitation Rate provides the rain and snow rates in millimeters per hour (mm/hr). It is estimated by the Integrated Multi-satellitE Retrievals for Global Precipitation Measurement (GPM) (IMERG) algorithm. The IMERG algorithm uses passive-microwave data from the GPM constellation of satellites and infrared data from geosynchronous satellites. IMERG “morphs” observations to earlier or later times using wind from weather-model analyses. The daily IMERG dataset is derived from the half-hourly GPM_3IMERGHH. The derived result represents the final estimate of the daily mean precipitation rate in mm/day.\nThe IMERG data has 0.1 x 0.1 degree latitude-longitude resolution (approximately 11 by 11 km at the Equator). The grid covers the globe, although precipitation cannot always be estimated near the Poles. The dataset and algorithm are described in the data user guide and the Algorithm Theoretical Basis Document (ATBD).\nPlease cite the dataset as: &gt; Huffman, G.J., E.F. Stocker, D.T. Bolvin, E.J. Nelkin, Jackson Tan (2023), GPM IMERG Final Precipitation L3 1 day 0.1 degree x 0.1 degree V07, Edited by Andrey Savtchenko, Greenbelt, MD, Goddard Earth Sciences Data and Information Services Center (GES DISC), https://doi.org/10.5067/GPM/IMERGDF/DAY/07\n\ncollection_id = 'C2723754864-GES_DISC'  # GPM IMERG Final Precipitation L3 1 day 0.1 degree x 0.1 degree V07 (GPM_3IMERGDF)\n\n# Bounds within which we search for data granules\ndate_start = \"2023-02-24\"\ndate_end = \"2023-02-26\"\ndate_range = (date_start, date_end)\nbbox = (-127.0761, 31.6444, -113.9039, 42.6310)\n\nresults = earthaccess.search_data(\n    concept_id = collection_id,\n    #cloud_hosted = True,\n    temporal = date_range,\n    bounding_box = bbox,\n)\n\nds = xr.open_mfdataset(earthaccess.open(results))\n\nLet’s print out all the variable names.\n\nfor v in ds.variables:\n    print(v)\n\nOf the variables listed above, we are interested in three variables: precipitation, precipitation_cnt_cond, and probabilityLiquidPrecipitation. Let’s print their attributes.\n\nds.variables['precipitation'].attrs\n\n\nds.variables['precipitation_cnt_cond'].attrs\n\n\nds.variables['probabilityLiquidPrecipitation'].attrs\n\n\n\nSubsetting\nIn addition to directly accessing the files archived and distributed by each of the NASA DAACs, many datasets also support services that allow us to customize the data via subsetting, reformatting, reprojection/regridding, and file aggregation. What does subsetting mean? To subset means to extract only the portions of a dataset that are needed for a given purpose. Here’s a generalized graphic of what we mean.\n\nThere are three primary types of subsetting that we will walk through: 1. Temporal 2. Spatial 3. Variable\nIn each case, we will be excluding parts of the dataset that are not wanted using xarray. Note that “subsetting” is also called a data “transformation”.\n\nds.time.values\n\nWe start with a subset that represents the U.S. state of California. Notice the dimensions of the Dataset and each variable.\n\nds_subset = ds.sel(time='2023-02-24', lat=slice(31, 43), lon=slice(-125, -113)) \nds_subset\n\n\n\nPlotting\nWe will first plot using the methods built-in to the xarray package.\n\nds_subset['precipitation'].squeeze().plot(figsize=(10,6), x='lon', y='lat');\n\nNow let’s utilize the “Probability of liquid precipitation phase” (probabilityLiquidPrecipitation) variable to split apart the snow precipitation from everything else. And we’ll utilize precipitation_cnt_cond to filter out data points that had less than 0.01 mm/hr preciptation amounts.\n\nsnow = ds_subset['precipitation'].where(\n    (ds_subset.precipitation_cnt_cond&gt;0) & (ds_subset.probabilityLiquidPrecipitation == 1)\n)\n\nprcp = ds_subset['precipitation'].where(\n    (ds_subset.precipitation_cnt_cond&gt;0) & (ds_subset.probabilityLiquidPrecipitation != 1)\n)\n\nIn the following plotting commands, we utilize cartopy and matplotlib to generate a more customized figure.\ncartopy is used to set the map projection (to PlateCarree) and to add U.S. state boundary lines to the figure. matplotlib’s pcolormesh is used to generate the color plot, with colors determined by the third argument’s value.\n\n# create the plot\nproj = ccrs.PlateCarree()\nfig, ax = plt.subplots(figsize=(8,5), dpi=130, facecolor=\"w\", subplot_kw=dict(projection=proj))\n\nsnowax = plt.pcolormesh(prcp.lon, prcp.lat, snow.squeeze(), vmax=53, cmap='cool')\nprcpax = plt.pcolormesh(prcp.lon, prcp.lat, prcp.squeeze(), vmax=53, cmap='RdYlGn')\n\nplt.colorbar(snowax, ax=ax, label=\"snow (mm/day)\")\nplt.colorbar(prcpax, ax=ax, label=\"rainfall (mm/day)\")\nax.add_feature(cfeature.STATES)\nax.set_extent([-125, -113.0, 31.0, 43.0], crs=proj)\nax.set_title(f'Precipitation {date_start}')\n\nplt.show()"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#example-2---xarray-subsetting---snow-cover-from-modisterra-daily-level-3",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#example-2---xarray-subsetting---snow-cover-from-modisterra-daily-level-3",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Example 2 - Xarray Subsetting - Snow Cover from MODIS/Terra, Daily Level 3",
    "text": "Example 2 - Xarray Subsetting - Snow Cover from MODIS/Terra, Daily Level 3\n\nDataset\nWe will use MODIS/Terra Snow Cover Daily L3 Global 0.05Deg CMG. The Moderate Resolution Imaging Spectroradiometer (MODIS) global Level-3 (L3) data set provides the percentage of snow-covered land and cloud-covered land observed daily, within 0.05° (approx. 5 km) MODIS Climate Modeling Grid (CMG) cells.\nThe dataset and algorithm is described in the data user guide and the Product Specific Document.\nPlease cite the dataset as: &gt; Hall, D. K. and G. A. Riggs. (2021). MODIS/Terra Snow Cover Daily L3 Global 0.05Deg CMG, Version 61. Boulder, Colorado USA. NASA National Snow and Ice Data Center Distributed Active Archive Center. https://doi.org/10.5067/MODIS/MOD10C1.061.\nUsing the dataset DOI, we will use the earthaccess module to search for dataset granules from February 24, 2023, and March 2, 2023.\n\ndoi = '10.5067/MODIS/MOD10C1.061' # MODIS Terra Snowcover\n\n# search granules from Feb 15, 2023\ndate1 = \"2023-02-15\"\ngranules1 = earthaccess.search_data(\n    count=-1, # needed to retrieve all granules\n    doi=doi,\n    temporal=(date1, date1)\n)\n# search granules from March 02, 2023\ndate2 = \"2023-03-02\"\ngranules2 = earthaccess.search_data(\n    count=-1, # needed to retrieve all granules\n    doi=doi,\n    temporal=(date2, date2)\n)\n\nLet’s download the granules to the local environment. This is needed as direct access to HDF4 files that MODIS Collection 6.1 comes as is currently not supported. The earthaccess module manages the authentication that is required for accessing data.\n\nearthaccess.download(granules1, local_path='.')\nearthaccess.download(granules2, local_path='.')\n\n\n\nSubsetting\nLet’s open the downloaded granules into a rioxarray. The variable Day_CMG_Snow_Cover provides daily percent snow in 5km grids. The variable Snow_Spatial_QA provides quality indicator for each grid: 0=best, 1=good, 2=ok, 3=poor, 4=other, 237=inland water, 239=ocean, 250=cloud obscured water 252=Antarctica mask, 253=not mapped, 254=no retrieval, and 255=fill. We will only use the grids with 0, 1, and 2 quality flags.\n\n# open granule from Feb 15, 2023\ng_1 = Path(Path(granules1[0].data_links()[0]).name)\nif g_1.is_file():\n    with rxr.open_rasterio(g_1) as modis:\n        print(modis)\n        snow_cover1 = modis['Day_CMG_Snow_Cover'][:]\n        snow_cover_qa1 = modis['Snow_Spatial_QA'][:]\n\n# open granules from March 02, 2023\ng_2 = Path(Path(granules2[0].data_links()[0]).name)\nif g_2.is_file():\n    with rxr.open_rasterio(g_2) as modis:\n        snow_cover2 = modis['Day_CMG_Snow_Cover'][:]\n        snow_cover_qa2 = modis['Snow_Spatial_QA'][:]\n\n# Spatially subset and keep only good quality cells\nsnow_cover_good1 = (\n    snow_cover1\n    .sel(x=slice(-125, -113), y=slice(43, 31))\n    .where((snow_cover_qa1 &gt;= 0) & (snow_cover_qa1 &lt;= 2))\n)\nsnow_cover_good2 = (\n    snow_cover2\n    .sel(x=slice(-125, -113), y=slice(43, 31))\n    .where((snow_cover_qa2 &gt;= 0) & (snow_cover_qa2 &lt;= 2))\n)\n\n\n\nPlotting\n\n# create the plot\nproj = ccrs.PlateCarree()\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,4), dpi=130, facecolor=\"w\", subplot_kw=dict(projection=proj))\n\nsnowax1 = ax1.pcolormesh(snow_cover_good1.x.values, snow_cover_good1.y.values, snow_cover_good1.values[0], vmax=100, cmap='Blues')\nplt.colorbar(snowax1, ax=ax1, label=\"snow cover (%)\")\nax1.add_feature(cfeature.STATES)\nax1.set_title(f'Snow Cover {date1}')\n\nsnowax2 = ax2.pcolormesh(snow_cover_good2.x.values, snow_cover_good2.y.values, snow_cover_good2.values[0], vmax=100, cmap='Blues')\nplt.colorbar(snowax2, ax=ax2, label=\"snow cover (%)\")\nax2.add_feature(cfeature.STATES)\nax2.set_title(f'Snow Cover {date2}')\nplt.show()"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#example-3---harmony-py-subsetting---precipitable-water-from-dscovr-epic-composite",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#example-3---harmony-py-subsetting---precipitable-water-from-dscovr-epic-composite",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Example 3 - Harmony-py Subsetting - Precipitable Water from DSCOVR-EPIC Composite",
    "text": "Example 3 - Harmony-py Subsetting - Precipitable Water from DSCOVR-EPIC Composite\n\nDataset\nThe NASA Earth Polychromatic Imaging Camera (EPIC)-view Multi-Sensor Global Cloud and Radiance Composites are generated by optimally merging together multiple imagers on low Earth orbit (LEO) satellites (including MODIS, VIIRS, and AVHRR) and geostationary (GEO) satellites (including GOES-13 and -15, METEOSAT-7 and -10, MTSAT-2, and Himawari-8). These provide a seamless global composite product at 5-km resolution by using an aggregated rating that considers five parameters (nominal satellite resolution, pixel time relative to the Earth Polychromatic Imaging Camera (EPIC) observation time, viewing zenith angle, distance from day/night terminator, and sun glint factor) and selects the best observation at the time nearest to the EPIC measurements. The global composite data are then remapped into the EPIC Field of View (FOV) by convolving the high-resolution cloud properties with the EPIC point spread function (PSF) defined with a half-pixel accuracy to produce the EPIC composite. PSF-weighted radiances and cloud properties averages are computed separately for each cloud phase. Ancillary data (i.e., surface type, snow and ice map, skin temperature, precipitable water, etc.) needed for anisotropic factor selections are also included in the composite. These composite images are produced for each observation time of the EPIC instrument (typically 300 to 600 composites per month).\nThe dataset and development of the composite product is described in the Khlopenkov et al., 2017 and the Product Description page. This dataset can also be viewed in Earthdata Search.\nPlease cite the dataset as: &gt; NASA/LARC/SD/ASDC. (2017). EPIC-view satellite composites for DSCOVR, Version 1 [Data set]. NASA Langley Atmospheric Science Data Center DAAC. Retrieved from https://doi.org/10.5067/EPIC/DSCOVR/L2_COMPOSITE_01.\n\n\nHarmony\nHarmony is the behind-the-scenes orchestrator for much of the cloud-based transformations happening on NASA’s Earthdata Search interface. However, requests can also be sent directly to Harmony in a programmatic fashion, either through use of the harmony-py Python library or through transmitting underlying HTTP requests. In this example, we demonstrate the use of harmony-py, which was created as an alternative to Harmony’s RESTful Application Programming Interface (API) and to make it more convenient to invoke Harmony directly from a Python environment, such as Jupyter notebooks or larger Python applications.\nNote that additional examples can be found on the harmony-py GitHub page here.\n\nharmony_client = Client()\n\n\nInspecting a data collection for its capabilities and variables\nThe harmony-py package provides useful functions for requesting a report of the capabilities that are configured for a given collection. We will use that function here to inspect the DSCOVR EPIC-view Composite collection.\n\ncollection_id = \"C1576365803-LARC_ASDC\"  # EPIC-view satellite composites for DSCOVR, Version 1\n# collection_id = \"C1996881146-POCLOUD\"\n\ncapabilities_request = CapabilitiesRequest(collection_id=collection_id)\n\ncapabilities = harmony_client.submit(capabilities_request)\ncapabilities_str = json.dumps(capabilities, indent=2)\n\n\npprint(json.dumps({key: val for key, \n                  val in capabilities.items() \n                  if key not in ['services', 'variables']})\n     )\n\n('{\"conceptId\": \"C1996881146-POCLOUD\", \"shortName\": \"MUR-JPL-L4-GLOB-v4.1\", '\n '\"variableSubset\": true, \"bboxSubset\": true, \"shapeSubset\": true, '\n '\"concatenate\": true, \"reproject\": true, \"outputFormats\": '\n '[\"application/netcdf\", \"application/x-netcdf4\", \"image/tiff\", \"image/png\", '\n '\"image/gif\", \"application/x-zarr\"], \"capabilitiesVersion\": \"2\"}')\n\n\n\npprint([v[\"name\"] for v in capabilities[\"variables\"]])\n\n['analysed_sst',\n 'analysis_error',\n 'lat',\n 'lon',\n 'mask',\n 'sea_ice_fraction',\n 'sst_anomaly',\n 'time']\n\n\n\npprint(capabilities[\"services\"])\n\n\n\n\nSubsetting\n\nDefine an area of interest\nFor this example, we will use a GeoJSON to specify a non-rectangular region instead of a simpler, rectangular bounding box. We will use the GeoJSON that defines a region around San Francisco.\n\n# Read the GeoJSON into a GeoDataFrame\nsf_geojson = '../../2023-Cloud-Workshop-AGU/data/sf_to_sierranvmt.geojson'\ngdf = gpd.read_file(sf_geojson)\n\n\n# We define a Geoview Point so we can visualize the area of interest in relation to San Francisco\nsf = (-122.42, 37.77, 'SanFrancisco')\ncities_lonlat = gv.Points([sf], vdims='City')\n\n# Generate an image\nbase = gv.tile_sources.EsriImagery.opts(width=650, height=500)\nocean_map = gv.Polygons(gdf).opts(line_color='yellow', line_width=5, color=None)\nbase * ocean_map * cities_lonlat.options(size=20, color='red', marker='x')\n\n\n\n\n\n  \n\n\n\n\n\n\nBuild a Harmony subsetting request\nA Harmony request can include spatial, temporal, and variable subsetting all in the same request. Here we will request all three types of subsetting to be performed on the EPIC-view Composite dataset.\n\ncollection_id = \"C1576365803-LARC_ASDC\"  # (~9 to 12 minutes to process) EPIC-view satellite composites for DSCOVR, Version 1\n# collection_id = \"C1996881146-POCLOUD\"  # (?)\n\nrequest = Request(\n    collection=Collection(id=collection_id),\n    shape=sf_geojson,\n    temporal={\n        'start': dt.datetime(2016, 2, 24, 0),\n        'stop': dt.datetime(2016, 2, 24, 23)   \n    },\n    variables=[\"lat\", \"lon\", \"time\", \"mask\", \"analysed_sst\", \"sst_anomaly\"]\n    # variables=[\"general/relative_time\", \"general/precipitable_water\", \"clear_sky/skin_temperature\"]\n)\n\n\njob_id = harmony_client.submit(request)\njob_id\n\n'73e211a2-52f3-4db3-b8fb-636e1748c201'\n\n\n\nharmony_client.status(job_id)\n\n{'status': 'running',\n 'message': 'The job is being processed',\n 'progress': 0,\n 'created_at': datetime.datetime(2023, 11, 15, 17, 14, 41, 72000, tzinfo=tzlocal()),\n 'updated_at': datetime.datetime(2023, 11, 15, 17, 14, 41, 72000, tzinfo=tzlocal()),\n 'created_at_local': '2023-11-15T17:14:41+00:00',\n 'updated_at_local': '2023-11-15T17:14:41+00:00',\n 'request': 'https://harmony.earthdata.nasa.gov/C1996881146-POCLOUD/ogc-api-coverages/1.0.0/collections/lat,lon,time,mask,analysed_sst,sst_anomaly/coverage/rangeset?forceAsync=true&subset=time(%222016-02-24T00%3A00%3A00%22%3A%222016-02-24T23%3A00%3A00%22)',\n 'num_input_granules': 2,\n 'data_expiration': datetime.datetime(2023, 12, 15, 17, 14, 41, 72000, tzinfo=tzlocal()),\n 'data_expiration_local': '2023-12-15T17:14:41+00:00'}\n\n\n\nharmony_client.wait_for_processing(job_id, show_progress=True)\n\n [ Processing:   0% ] |                                                   | [\\]\n\n\nKeyboardInterrupt: \n\n\n\nharmony_client.status(job_id)\n\n\nresults = harmony_client.result_json(job_id, show_progress=True)\n# results\n\n\nprint('\\nDownloading results:')\nfutures = harmony_client.download_all(job_id)\n\nfilenames = []\nfor f in futures:\n    fn = f.result()\n    filenames.append(fn)\n    print(fn)  # f.result() is a filename, in this case\n\nprint('\\nDone downloading.')\n\n\nnew_ds_general = xr.open_dataset(filenames[0], group=\"general\", decode_times=False)\nnew_ds_general\n\n\n\n\nPlotting\n\n# Flatten and remove null data points in preparation for plotting.\nlons = new_ds_general['lon'].values.flatten()\nlats = new_ds_general['lat'].values.flatten()\nvals = new_ds_general['precipitable_water'].values.flatten()\ngood_idcs = ~np.isnan(lons) & ~np.isnan(lats) & ~np.isnan(vals)\nlons = lons[good_idcs]\nlats = lats[good_idcs]\nvals = vals[good_idcs]\n\n\n# Create figure\nproj = ccrs.PlateCarree()\nfig, ax = plt.subplots(figsize=(6, 4), facecolor=\"w\", subplot_kw=dict(projection=proj))\n\nax_handle = ax.scatter(lons, lats, c=vals, cmap=\"cool\")\nplt.colorbar(ax_handle, ax=ax, label=\"precipitable water\")\n\nax.add_feature(cfeature.STATES)\nax.set_extent([-125, -113.0, 31.0, 43.0], crs=proj)\n# ax1.set_title(f'{date}')\n\nax.set_xticks([-125, -120, -115, -110], crs=proj)\nax.set_yticks([32, 34, 36, 38, 40, 42], crs=proj)\nlon_formatter = LongitudeFormatter(number_format='.1f',\n                                   degree_symbol='',\n                                   dateline_direction_label=True)\nlat_formatter = LatitudeFormatter(number_format='.1f',\n                                  degree_symbol='')\nax.xaxis.set_major_formatter(lon_formatter)\nax.yaxis.set_major_formatter(lat_formatter)\n\nplt.show()"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#appendix---snow-mass-from-smap-3-hourly-level-4",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#appendix---snow-mass-from-smap-3-hourly-level-4",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Appendix - Snow Mass from SMAP, 3-hourly Level 4",
    "text": "Appendix - Snow Mass from SMAP, 3-hourly Level 4\n\nDataset\nThe Soil Moisture Active Passive (SMAP) L4 Global 3-hourly 9 km EASE-Grid Surface and Root Zone Soil Moisture Geophysical Data (SPL4SMGP) provides a model-derived global 3-hr time average of snow mass in kg/m2. SMAP L-band brightness temperature data from descending and ascending half-orbit satellite passes (approximately 6:00 a.m. and 6:00 p.m. local solar time, respectively) are assimilated into a land surface model that is gridded using an Earth-fixed, global cylindrical 9 km Equal-Area Scalable Earth Grid, Version 2.0 (EASE-Grid 2.0) projection. Snow mass estimates are based on a snow model component of the NASA Catchment Land Surface Model.\nThe dataset and algorithm are described in the data user guide and the Product Specific Document.\nPlease cite the dataset as: &gt; Reichle, R., G. De Lannoy, R. D. Koster, W. T. Crow, J. S. Kimball, Q. Liu, and M. Bechtold. (2022). SMAP L4 Global 3-hourly 9 km EASE-Grid Surface and Root Zone Soil Moisture Geophysical Data, Version 7. Boulder, Colorado USA. NASA National Snow and Ice Data Center Distributed Active Archive Center. https://doi.org/10.5067/EVKPQZ4AFC4D.\n\n# SMAP SPL4SMGP\ndoi = '10.5067/EVKPQZ4AFC4D'\n\n# search granules from Feb 15, 2023\ndate1 = \"2023-02-15\"\ngranules1 = earthaccess.search_data(\n    count=-1, # needed to retrieve all granules\n    doi=doi,\n    temporal=(date1, date1)\n)\n\n# search granules from March 02, 2023\ndate2 = \"2023-03-02\"\ngranules2 = earthaccess.search_data(\n    count=-1, # needed to retrieve all granules\n    doi=doi,\n    temporal=(date2, date2)\n)\n\n\n# granules from Feb 15, 2023\nfh1 = earthaccess.open(granules1)\n# open geophysical_data group\nds1 = xr.open_dataset(fh1[0], phony_dims='access', group='Geophysical_Data')\n# get location\nds_loc1 = xr.open_dataset(fh1[0], phony_dims='access')\n\n\n# granules from March 02, 2023\nfh2 = earthaccess.open(granules2)\n# open geophysical_data group\nds2 = xr.open_dataset(fh2[0], phony_dims='access', group='Geophysical_Data')\n# get location\nds_loc2 = xr.open_dataset(fh2[0], phony_dims='access')\n\nThe “snow_mass” variable is within the “Geophysical_Data” group. It provides the average snow mass (or snow water equivalent) over a land fraction of the grid cell, excluding areas of open water and permanent ice. Let’s print the attributes of the snow_mass variable.\n\nds1.variables['snow_mass'].attrs\n\n\n# create the plot\nproj = ccrs.Projection(\"EPSG:6933\") # EASEGRID 2\nfig, (ax1, ax2) = plt.subplots(1,2, figsize=(12,4), dpi=130, facecolor=\"w\", subplot_kw=dict(projection=proj))\n\nca_bounds = [-12060785, -10902950, 3769089, 4995383]\n\nsnow_mass1 = ds1.snow_mass.where(ds1.snow_mass&gt;9.4)\nsnowax1 = ax1.pcolormesh(ds_loc1.x, ds_loc1.y, snow_mass1, vmax=200, cmap='Blues')\nplt.colorbar(snowax1, ax=ax1, label=\"snow mass (kg/m2)\")\nax1.add_feature(cfeature.STATES)\nax1.set_extent(ca_bounds, crs=proj)\nax1.set_title(f'Snow Mass {date1}')\n\nsnow_mass2 = ds2.snow_mass.where(ds2.snow_mass&gt;9.4)\nsnowax2 = ax2.pcolormesh(ds_loc2.x, ds_loc2.y, snow_mass2, vmax=200, cmap='Blues')\nplt.colorbar(snowax2, ax=ax2, label=\"snow mass (kg/m2)\")\nax2.add_feature(cfeature.STATES)\nax2.set_extent(ca_bounds, crs=proj)\nax2.set_title(f'Snow Mass {date2}')\nplt.show()"
  },
  {
    "objectID": "tutorials/Earthdata_Subset_and_Plot.html#additional-resources",
    "href": "tutorials/Earthdata_Subset_and_Plot.html#additional-resources",
    "title": "Data subsetting and plotting with earthaccess, xarray, and harmony",
    "section": "Additional Resources",
    "text": "Additional Resources\n\nTutorials\nThis clinic was based off of several notebook tutorials including those presented during past workshop events, along with other materials co-created by the NASA Openscapes mentors: * 2021 Earthdata Cloud Hackathon * 2021 AGU Workshop * Accessing and working with ICESat-2 data in the cloud * Analyzing Sea Level Rise Using Earth Data in the Cloud\n\n\nCloud services\nThe examples used in the clinic provide an abbreviated and simplified workflow to explore access and subsetting options available through the Earthdata Cloud. There are several other options that can be used to interact with data in the Earthdata Cloud including:\n\nOPeNDAP\n\nHyrax provides direct access to subsetting of NASA data using Python or your favorite analysis tool\nTutorial highlighting OPeNDAP usage: https://nasa-openscapes.github.io/earthdata-cloud-cookbook/how-tos/working-locally/Earthdata_Cloud__Data_Access_OPeNDAP_Example.html\n\nZarr-EOSDIS-Store\n\nThe zarr-eosdis-store library allows NASA EOSDIS Collections to be accessed efficiently by the Zarr Python library, provided they have a sidecar DMR++ metadata file generated.\nTutorial highlighting this library’s usage: https://nasa-openscapes.github.io/2021-Cloud-Hackathon/tutorials/09_Zarr_Access.html\n\n\n\n\nSupport\n\nEarthdata Forum\n\nUser Services and community support for all things NASA Earthdata, including Earthdata Cloud\n\nEarthdata Webinar series\n\nWebinars from DAACs and other groups across EOSDIS including guidance on working with Earthdata Cloud\nSee the Earthdata YouTube channel for more videos"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The Enabling Analysis in the Cloud Using NASA Earth Science Data will take place on Sunday, December 10 from 13:00-16:30.\nZoom links will be shared directly with this group via a (calendar) meeting invite.\nNote, hands-on exercises will be executed from a Jupyter Lab instance in 2i2c. Click here to deploy the instance and simultaneously clone this GitHub repository to follow along with the tutorials. Please pass along your GitHub Username to get access."
  },
  {
    "objectID": "schedule.html#workshop-schedule",
    "href": "schedule.html#workshop-schedule",
    "title": "Schedule",
    "section": "Workshop Schedule",
    "text": "Workshop Schedule\n\nDecember 10, 2023\n\n\n\nTime, PST (UTC-7)\nEvent\nLeads/Instructors\n\n\n\n\n1:00 pm\nWelcome / Open Science Mindset\nCassie Nickles (PO.DAAC)\n\n\n1:20 pm\nIntroduction to NASA Earthdata Cloud\nMichele Thornton (ORNL DAAC)\n\n\n1:40 pm\nOrientation and setup in JupyterHub in the Cloud\nMichele Thornton (ORNL DAAC)\n\n\n2:00 pm\nTutorial: In-cloud Science Workflow: Search & Discovery\nAaron Friesz (LP DAAC)\n\n\n2:30 pm\nBreak\n\n\n\n2:45 pm\nTutorial: In-cloud Science Workflow: Access, Subset & Plot\nDanny Kaufman (ASDC DAAC)\n\n\n3:45 pm\nQ & A\nAll NASA Openscapes Mentors\n\n\n4:15 pm\nClosing Survey\nCassie Nickles (PO.DAAC)"
  },
  {
    "objectID": "schedule.html#closing---close-out-your-jupyter-hub",
    "href": "schedule.html#closing---close-out-your-jupyter-hub",
    "title": "Schedule",
    "section": "Closing - Close out your Jupyter Hub!",
    "text": "Closing - Close out your Jupyter Hub!\n\nClose out your JupyterHub instance if you are finished for the day, following these instructions.\nYou will continue to have access to the 2i2c JupyterHub in AWS for two weeks following this Workshop. You may use that time on your own to continue work and learn more about migrating data access routines and science workflows to the cloud. This cloud compute environment is supported by the NASA Openscapes project.\n\n\nThank you!"
  }
]